service: quiccasa-service
# app and org for use with dashboard.serverless.com
app: quiccasa-service
#org: sistemisolarirossi

# only deploy with a specific Serverless version
frameworkVersion: "2"

useDotenv: true

configValidationMode: "error"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: serverless
  stage: dev
  region: eu-west-1
  # apiGateway:
  #   shouldStartNameWithService: true
  # tracing:
  #   apiGateway: true
  #   lambda: true

  vpc:
    securityGroupIds:
      - sg-0f0041d014678c4d0
# VPC security group
#      - sg-dbc46487
# default security group
    subnetIds:
      - subnet-ae3362f4
      - subnet-8f3521e9
      - subnet-26bf586d
  environment:
    MYSQL_HOST: "quiccasa.cimqtrmgyukk.eu-west-1.rds.amazonaws.com"
    MYSQL_PORT: "3306"
    MYSQL_USER: "admin"
    MYSQL_PASS: "c_8G6+Q3xxLp8"
    MYSQL_NAME: "quiccasa"

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
            - "s3:DeleteObject"
          Resource: { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "ServerlessDeploymentBucket" }, "/*" ] ] }
        - Effect: "Allow"
          Action:
            - "cognito-idp:ListUsers"
          Resource: "*"

        # service wide environment variables
#environment:
#  variable1: value1

# packaging information
package:
  individually: true
  patterns:
    - '!private/**'
    - '!tmp/**'
    #- '!node_modules/**'

functions:
  dbok:
    handler: api/handler.dbok
    memorySize: 1024 # MB, default is 1024 MB
    timeout: 5 # seconds, default is 6 seconds
    description: Test db in prod
    events:
      - http:
          method: get
          path: dbok
          cors: true
    tags: 
      project: ${self:service}

  dbSetup:
    handler: api/handler.dbSetup
    memorySize: 1024 # MB, default is 1024 MB
    timeout: 4 # seconds, default is 6 seconds
    description: Test db
    events:
      - http:
          method: get
          path: dbSetup
          cors: true
    tags: 
      project: ${self:service}

  dbTest:
    handler: api/handler.dbTest
    memorySize: 1024 # MB, default is 1024 MB
    timeout: 7 # seconds, default is 6 seconds
    description: Test db
    events:
      - http: 
          method: get
          path: dbTest
          cors: true
    tags: 
      project: ${self:service}

  unsubscribe:
    handler: api/unsubscribe
    memorySize: 128 # MB, default is 1024 MB
    timeout: 10 # seconds, default is 6 seconds
    description: Unsubscribe user from service subscription
    events:
      - http: 
          method: get
          path: unsubscribe
          cors: true

  getUsersList:
    handler: api/handler.getUsersList
    memorySize: 128 # MB, default is 1024 MB
    timeout: 10 # seconds, default is 6 seconds
    description: get Cognito user by attribute
    events:
      - http: 
          method: get
          path: getUsersList
          cors: true

  # getAWSWelcome:
  #   handler: api/handler.getAWSWelcome
  #   memorySize: 128 # MB, default is 1024 MB
  #   timeout: 10 # seconds, default is 6 seconds
  #   description: get AWS Welcome (test)
  #   events:
  #     - http: 
  #         method: get
  #         path: getAWSWelcome

  # getS3ObjectWithPromiseExample:
  #   handler: api/handler.getS3ObjectWithPromiseExample
  #   memorySize: 128 # MB, default is 1024 MB
  #   timeout: 10 # seconds, default is 6 seconds
  #   description: get S3 Object With Promise Example
  #   events:
  #     - http: 
  #         method: get
  #         path: getS3ObjectWithPromiseExample

resources:
  Resources:
    AWSLambdaVPCAccessExecutionRole:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        Description: Creating policy for vpc connetion.
        Roles:
          - {"Ref" : "IamRoleLambdaExecution"}
        PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"

plugins:
  - serverless-domain-manager
  # use webpack only while deployng remotely
  - serverless-webpack

custom:
  version: 1
  domain:
    dev: apidev.sistemisolari.com
    prod: api.sistemisolari.com
  customDomain:
    domainName: ${self:custom.domain.${self:provider.stage}}
    basePath: "v${self:custom.version}"
    stage: ${self:provider.stage}
    createRoute53Record: true

  webpack:
    includeModules:
      forceExclude:
        - aws-sdk
        - pnpapi
